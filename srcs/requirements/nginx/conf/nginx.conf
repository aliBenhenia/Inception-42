events {
    # You can add directives here if needed
}

http {
    server {
        listen 443 ssl;
        server_name www.$DOMAIN_NAME.42.fr $DOMAIN_NAME.42.fr;

        ssl_certificate /etc/nginx/ssl_cer.crt;
        ssl_certificate_key /etc/nginx/ssl_cer_key.key;

        ssl_protocols TLSv1.3;
        
        root /var/www/html;
        index index.php index.html;

        # Main location block - handle static files and directories
        location / {
            try_files $uri $uri/ =404;
        }

        # PHP processing via FastCGI
        location ~ \.php$ {
            include fastcgi.conf;
            fastcgi_pass wordpress:9000;
        }

        # Add any additional location blocks as needed
    }

    # Optionally, you can add more server blocks for other domains or HTTP redirections
}
# Sure, let’s simplify the NGINX configuration with a real-world example where NGINX acts as a reverse proxy server for an application running on a different server. 

# ### Scenario

# You have a website, `example.com`, that needs to be served securely over HTTPS. Your NGINX server will:

# 1. **Securely handle HTTPS requests**.
# 2. **Serve static files** (like HTML, CSS, images) directly.
# 3. **Forward PHP requests** to another server (e.g., a WordPress server).

# ### Configuration Breakdown

# Here’s how you’d configure NGINX to achieve this:

# ```nginx
# http {
#     server {
#         listen 443 ssl;  # Listen for HTTPS requests on port 443.
#         server_name www.example.com example.com;  # Handle requests for these domains.

#         # Paths to SSL certificate and private key for HTTPS
#         ssl_certificate /etc/nginx/ssl_cer.crt;
#         ssl_certificate_key /etc/nginx/ssl_cer_key.key;

#         # Use TLS version 1.3 for secure connections
#         ssl_protocols TLSv1.3;

#         # Directory where static files (HTML, CSS) are stored
#         root /var/www/html;
#         # Default files to serve if a directory is requested
#         index index.php index.html;

#         # Handle requests for static files (like HTML, CSS, images)
#         location / {
#             try_files $uri $uri/ =404;  # Try to serve the requested file or directory, show 404 if not found.
#         }

#         # Handle PHP requests by forwarding them to a separate server (e.g., WordPress)
#         location ~ \.php$ {
#             include fastcgi.conf;  # Include FastCGI settings.
#             fastcgi_pass wordpress:9000;  # Forward PHP requests to the FastCGI server on port 9000.
#         }

#         # You can add more location blocks here if needed for other routing.
#     }

#     # Additional server blocks can be added for different domains or configurations.
# }
# ```

# ### Simplified Explanation

# 1. **`listen 443 ssl;`**:
#    - **What It Does**: Tells NGINX to listen for HTTPS traffic on port 443.
#    - **Example**: If someone visits `https://example.com`, NGINX handles this request.

# 2. **`server_name www.example.com example.com;`**:
#    - **What It Does**: Specifies which domain names this configuration applies to.
#    - **Example**: Requests to both `www.example.com` and `example.com` will be handled by this block.

# 3. **`ssl_certificate /etc/nginx/ssl_cer.crt;`** and **`ssl_certificate_key /etc/nginx/ssl_cer_key.key;`**:
#    - **What They Do**: Provide the SSL certificate and private key needed for secure HTTPS connections.
#    - **Example**: The files `/etc/nginx/ssl_cer.crt` and `/etc/nginx/ssl_cer_key.key` enable secure communication.

# 4. **`ssl_protocols TLSv1.3;`**:
#    - **What It Does**: Ensures only TLSv1.3 is used for secure connections.
#    - **Example**: Makes sure the latest, most secure version of TLS is used.

# 5. **`root /var/www/html;`** and **`index index.php index.html;`**:
#    - **What They Do**: Set the default directory for static files and default files to serve.
#    - **Example**: Static files (e.g., HTML, CSS) are served from `/var/www/html`. If a directory is requested, `index.php` or `index.html` is served by default.

# 6. **`location / { try_files $uri $uri/ =404; }`**:
#    - **What It Does**: Handles requests for static files.
#    - **Example**: If a user requests `https://example.com/about`, NGINX looks for a file named `about` or a directory named `about`. If neither is found, it shows a 404 error.

# 7. **`location ~ \.php$ { include fastcgi.conf; fastcgi_pass wordpress:9000; }`**:
#    - **What It Does**: Forwards PHP requests to another server (e.g., a WordPress application).
#    - **Example**: If a request is made to `https://example.com/post.php`, NGINX forwards it to `wordpress:9000` where the PHP code is processed.

# ### Real-World Example

# Imagine you have a blog at `https://example.com`:

# - **Static Files**: `https://example.com/index.html` serves the main page of your blog.
# - **PHP Requests**: `https://example.com/post.php` is processed by a WordPress server running on `wordpress:9000`.

# NGINX:

# - Secures the connection with HTTPS.
# - Serves static content directly.
# - Forwards PHP requests to the WordPress server for processing.

# This configuration ensures that all requests to your site are handled securely and efficiently.




# Mzian, ghadi nchre7 lik kol joz'a mn had l configuration b darija o n3tik mital:

# 1. `http { ... }`: Hada howa l bloc principal dyal Nginx li fih configuration dyal servers HTTP/HTTPS.

# 2. `server { ... }`: Hada kay3rref wa7d l server virtuel. Kol server kayrepresenti wa7d l site web.

# 3. `listen 443 ssl;`: Hadi kat9ol l Nginx y'écouter 3la port 443 (port dyal HTTPS) o yst3ml SSL.

# 4. `server_name www.$DOMAIN_NAME.42.fr $DOMAIN_NAME.42.fr;`: Hadi kat7ded smiyat d domains li l server ghadi y9blhom. `$DOMAIN_NAME` hiya variable li ghadi t3wwd b smiya d domain dyalk.

#    Mital: Ila kan `$DOMAIN_NAME` howa "abenheni", l server ghadi y9bl "www.abenheni.42.fr" o "abenheni.42.fr".

# 5. `ssl_certificate` o `ssl_certificate_key`: Hado kay7ddo l blayss dyal certificate SSL o l private key dyalo.

# 6. `ssl_protocols TLSv1.3;`: Hadi kat7ded version d TLS li ghadi yst3ml. TLSv1.3 hiya l version l'aktar jdida o sécurisée.

# 7. `root /var/www/html;`: Hadi kat7ded l blasa fin kaynin l fichiers dyal website dyalk.

# 8. `index index.php index.html;`: Hadi kat7ded trartib d fichiers li Nginx ghadi y9llb 3lihom ila tlab chi directory.

# 9. `location / { ... }`: Hada bloc li kay handle l requests 3ammin:
#    - `try_files $uri $uri/ =404;`: Kay7awl y9llb 3la fichier, mn b3d directory, ila mal9a walo kay3ti error 404.

# 10. `location ~ \.php$ { ... }`: Hada bloc li kay handle l fichiers PHP:
#     - `include fastcgi.conf;`: Kay7t l configuration standard dyal FastCGI.
#     - `fastcgi_pass wordpress:9000;`: Kay7wl l requests PHP l container "wordpress" 3la port 9000.

# Mital kamil:

# Ntfrdo 3ndna website dyal pâtisserie smito "Gâteaux Délicieux":

# ```nginx
# http {
#     server {
#         listen 443 ssl;
#         server_name www.gateaux-delicieux.42.fr gateaux-delicieux.42.fr;

#         ssl_certificate /etc/nginx/gateaux_delicieux_cert.crt;
#         ssl_certificate_key /etc/nginx/gateaux_delicieux_key.key;

#         ssl_protocols TLSv1.3;
        
#         root /var/www/gateaux-delicieux;
#         index index.php index.html;

#         location / {
#             try_files $uri $uri/ /index.php?$args;
#         }

#         location ~ \.php$ {
#             include fastcgi.conf;
#             fastcgi_pass wordpress:9000;
#         }

#         location /images/ {
#             alias /var/www/gateaux-delicieux/photos/;
#         }

#         location /admin/ {
#             auth_basic "Zone Administrateur";
#             auth_basic_user_file /etc/nginx/.htpasswd;
#         }
#     }
# }
# ```

# F had l mital:
# 1. L website ghadi ykoun disponible 3la "www.gateaux-delicieux.42.fr" o "gateaux-delicieux.42.fr".
# 2. Kayn SSL certificate spécifique l had website.
# 3. L fichiers dyal site kaynin f `/var/www/gateaux-